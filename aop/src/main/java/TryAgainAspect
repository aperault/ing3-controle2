import lombok.extern.java.Log;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.lang.reflect.Method;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;

@Component
@Aspect
@Log
public class TryAgainAspect {



    @Around("@annotation(TryAgain)")
    public Object retryUntilNoException(ProceedingJoinPoint joinPoint,TryAgain tryAgain ) throws Throwable {

        ArrayList<Class> excepClass = tryAgain.exception();

        do {

            try {
                return joinPoint.proceed();
            } catch (Throwable ex) {

                if (!excepClass.contains(ex)) {
                    throw ex;
                }

            }
        } while (true);


    }
}